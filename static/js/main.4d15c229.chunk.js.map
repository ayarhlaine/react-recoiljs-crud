{"version":3,"sources":["Nav/Nav.jsx","Post/PostList/Post.jsx","Post/PostList/PostTable.jsx","Post/PostList/LoadingPost.jsx","state/index.js","Post/CreatePost/CreatePost.jsx","Post/CreatePost/PostModal/PostModal.jsx","Post/PostSuccessMessage/PostSuccessMessage.jsx","Post/PostList/PostList.jsx","apiService/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Nav","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","process","marginBottom","media","height","Post","body","Card","CardActionArea","CardMedia","image","CardContent","gutterBottom","component","CardActions","Button","size","PostTable","posts","map","row","index","key","LoadingPost","Skeleton","animation","style","width","postState","postListsState","atom","default","postLoadingState","postModalOpenState","showPostSuccessMessageState","CreatePost","setPostModalOpenState","useSetRecoilState","onClick","modal","display","alignItems","justifyContent","paper","minWidth","backgroundColor","palette","background","border","boxShadow","shadows","padding","PostModal","useRecoilState","postModalOpen","setPostModalOpen","setShowPostSuccessMessageState","Modal","open","onClose","aria-labelledby","aria-describedby","name","id","cols","rows","Alert","props","elevation","PostSuccessMessage","showPostSuccessMessage","setShowPostSuccessMessage","handleClose","Snackbar","autoHideDuration","severity","PostList","postLists","useRecoilValue","postLoading","apiService","getAllPosts","a","fetch","App","setPostLists","setPostLoadingState","useEffect","then","response","json","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4d15c229.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\nexport const Nav = () => {\n    const classes = useStyles();\n    return(\n            <div className={classes.root}>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        </IconButton>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            {process.env.REACT_APP_WEBSITE_NAME}\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n            </div>\n    )\n}\nexport default Nav;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n    root: {\n    //   maxWidth: 345,\n    marginBottom: 5,\n    },\n    media: {\n      height: 140,\n    },\n  });\n\nexport const Post = ({ title, body }) => {\n  const classes = useStyles();\n  return(\n        <Card className={classes.root}>\n        <CardActionArea>\n        <CardMedia\n            className={classes.media}\n            image=\"https://picsum.photos/200/300\"\n            title=\"Contemplative Reptile\"\n        />\n        <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                { title }\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                { body }\n            </Typography>\n        </CardContent>\n        </CardActionArea>\n        <CardActions>\n        <Button size=\"small\" color=\"primary\">\n            Like\n        </Button>\n        <Button size=\"small\" color=\"primary\">\n            Share\n        </Button>\n        </CardActions>\n    </Card>\n  )\n}\nexport default Post;","import React from 'react';\nimport Post from './Post';\nimport './PostTable.scss';\nexport const PostTable = ({ posts }) => {\n    return(\n            <div className={'Post__Table'}>\n            {posts.map((row, index) => (\n                <Post title={row.title} body={row.body} key={index}/>\n              ))}\n          </div>\n    )\n}\nexport default PostTable;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport Skeleton from '@material-ui/lab/Skeleton';\nconst useStyles = makeStyles({\n    root: {\n    marginBottom: 5,\n    },\n    media: {\n      height: 140,\n    },\n  });\n\nexport const LoadingPost = () => {\n  const classes = useStyles();\n  return(\n        <Card className={classes.root}>\n        <CardActionArea>\n        <Skeleton animation=\"wave\" variant=\"rect\" style={{height: 190 }}/>\n        <CardContent>\n            <Skeleton animation=\"wave\" height={10} width=\"80%\" />\n            <Skeleton animation=\"wave\" height={10} style={{ marginBottom: 6 }} />\n        </CardContent>\n        </CardActionArea>\n    </Card>\n  )\n}\nexport default LoadingPost;","import {\n    atom,\n} from 'recoil';\n// post list\nexport const postListsState = atom({\n    key: 'post/LIST_STATE', \n    default: [],\n});\n// post loading state\nexport const postLoadingState = atom({\n    key: 'post/POST_LOADING', \n    default: false,\n});\n\n// create post modal\nexport const postModalOpenState = atom({\n    key: 'post/MODAL_OPEN', \n    default: false,\n});\n\n// create post success message\nexport const showPostSuccessMessageState = atom({\n    key: 'post/SHOW_POST_SUCCESS_MESSAGE', \n    default: false,\n});\n\nconst postState = {\n    postListsState,\n    postLoadingState,\n    postModalOpenState,\n    showPostSuccessMessageState\n};\nexport default postState;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport { \n    useSetRecoilState\n} from 'recoil';\nimport postState from '../../state';\nconst useStyles = makeStyles({\n    root: {\n        marginBottom: 5,\n    },\n    media: {\n      height: 140,\n    },\n  });\n\nexport const CreatePost = () => {\n    const classes = useStyles();\n    const setPostModalOpenState = useSetRecoilState(postState.postModalOpenState)\n    return(\n        <div>\n            <Card className={classes.root}>\n                <CardActionArea onClick={() => setPostModalOpenState(true)}>\n                <CardContent>\n                   Hey! What is on your mind?\n                </CardContent>\n                </CardActionArea>\n            </Card>\n        </div>\n    )\n};\n\nexport default CreatePost;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport {\n    useRecoilState,\n    useSetRecoilState\n} from 'recoil';\nimport postState from '../../../state';\nimport './PostModal.scss';\nconst useStyles = makeStyles((theme) => ({\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    paper: {\n      position: 'absolute',\n      minWidth: 400,\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n}));\nexport const PostModal = () => {\n    const classes = useStyles();\n    const [ postModalOpen, setPostModalOpen] = useRecoilState(postState.postModalOpenState);\n    const setShowPostSuccessMessageState = useSetRecoilState(postState.showPostSuccessMessageState);\n    const handleClose = () => {\n        setPostModalOpen(false);\n    }\n    const onButtonClick = () => {\n        setShowPostSuccessMessageState(true);\n        setPostModalOpen(false);\n    }\n    return(\n        <Modal\n        className={classes.modal}\n        open={postModalOpen}\n        onClose={handleClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        <div className={classes.paper}>\n            <h3 className={'Create__Post__Text'}>Create Post</h3>\n            <hr/>\n            <div>\n                <textarea className={'Post_Body'} name=\"post_body\" id=\"\" cols=\"30\" rows=\"10\"></textarea>\n            </div>\n            <Button variant=\"contained\" color=\"primary\" className={'Post__Button'} onClick={onButtonClick}>\n                POST\n            </Button>\n        </div>\n      </Modal>\n    )\n}\nexport default PostModal;","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport {\n    useRecoilState,\n} from 'recoil';\nimport postState from '../../state';\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n  }\nexport const PostSuccessMessage = () => {\n    const [showPostSuccessMessage, setShowPostSuccessMessage] = useRecoilState(postState.showPostSuccessMessageState);\n    const handleClose = () => {\n        setShowPostSuccessMessage(false);\n    }\n    return (\n        <div>\n            <Snackbar open={showPostSuccessMessage} autoHideDuration={6000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity=\"success\">\n                Thanks you for joining us! This feature is not created yet, there will be soon.\n                </Alert>\n            </Snackbar>\n        </div>\n    )\n}\nexport default PostSuccessMessage;","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport PostTable from './PostTable';\nimport LoadingPost from './LoadingPost';\n\nimport CreatePost from '../CreatePost/CreatePost';\nimport PostModal from '../CreatePost/PostModal/PostModal';\nimport PostSuccessMessage from '../PostSuccessMessage/PostSuccessMessage';\nimport postState from '../../state';\nimport './PostList.scss';\nexport const PostList = () => {\n    const postLists = useRecoilValue(postState.postListsState);\n    const postLoading = useRecoilValue(postState.postLoadingState);\n    return(\n        <div className={'Post__List'}>\n            <PostSuccessMessage />\n            <CreatePost />\n            { \n            postLoading ?\n                <LoadingPost />:\n                <PostTable posts={postLists}/>\n            }\n            <PostModal />\n        </div>\n    )\n};\nexport default PostList;","const API = process.env.REACT_APP_API_URL;\nconst getAllPosts = async () => {\n    return await fetch(`${API}/posts`);\n}\nconst apiService = {\n    getAllPosts,\n};\nexport default apiService;","import React, {useEffect} from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport Nav from './Nav/Nav';\nimport PostList from './Post/PostList/PostList';\nimport postState from './state';\nimport apiService from './apiService';\nimport './App.scss';\nfunction App() {\n  const setPostLists = useSetRecoilState(postState.postListsState);\n  const setPostLoadingState = useSetRecoilState(postState.postLoadingState);\n    useEffect(() => {\n        setPostLoadingState(true);\n        apiService.getAllPosts()\n        .then(response => response.json())\n        .then(posts => {\n          setPostLoadingState(false);\n          setPostLists(posts);\n        });\n    },[setPostLists,setPostLoadingState]);\n  return (\n    <div className=\"App\">\n      <Nav />\n      <PostList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { RecoilRoot } from 'recoil';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}